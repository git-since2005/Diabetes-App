# Predict page for multipage project

# Required modules
import numpy as np
import pandas as pd
import streamlit as st
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error, mean_squared_log_error

@st.cache()

# 1.Prediction for given input
def prediction(car_df, car_width, engine_size, horse_power, drive_wheel_fwd, car_comp_buick):
	x = car_df.iloc[:, :-1]
	y = car_df['price']
	x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 42)

	# 1.1 Create model for prediction
	lin_reg = LinearRegression()
	lin_reg.fit(x_train, y_train)
	score = line_reg.score(x_train, y_train)

	# 1.2 Predict price of car according to given input
	price = lin_reg.predict([[car_width, engine_size, horse_power, drive_wheel_fwd, car_comp_buick]])
	price = price[0]

	# 1.3 Calculate accuracy of model above for its prediction
	y_test_pred = lin_reg.predict(x_test)
	inputs = (y_test, y_test_pred)
	test_r2_score = r2_score(inputs)
	test_mae = mean_absolute_error(inputs)
	test_rmse = np.sqrt(mean_squared_error(inputs))

	# 1.4 Return values of prediction and accuracy score
	return price, score, test_r2_score, test_mae, test_msle, test_rmse


def app(car_df):
	# 2.Text with paragraph tag in HTML which is styled with black color, font size of 25pixels, and Roboto font with sub font family sans serif and used strong tag instead of bold tag
	st.markdown("<p style = 'color: black; font-size:25px; font-family: 'Roboto', sans-serif'> This app uses <strong>LinearRegression</strong> to predict the price of a car based on your input.",  unsafe_allow_html = True)
	
	# 2.1.1 Sliders for taking input from the user
	st.subheader("Select Values:")
	car_wid = st.slider("Car Width", float(car_df['carwidth'].min()), float(car_df['carwidth'].man()))
	eng_siz = st.slider("Engine Size", int(car_df['enginesize'].min()), int(car_df['enginesize'].max()))
	hor_pow = st.slider("Horse Power", int(car_df['horsepower'].min()), int(car_df['horsepower'].max()))
	drw_fwd = st.radio("Is it a forward drive wheel car?", ("Yes", "No"))
	
	# 2.1.2 Changing to numeric values for Yes & No
	if drw_fwd == "No":
		drw_fwd = 0
	else:
		drw_fwd = 1

	# 2.1.3 Input for buick also changing values with binary numeric values
	com_bui = st.radio("Is the car manufactured by Buick?", ("Yes", "No"))
	if com_bui == "No":
		com_bui = 0
	else:
		com_bui = 1

	# 2.2 For prediction and submitting all values of user by button
	if st.button("Predict"):
		st.subheader("Prediction results:")
		price, score, car_r2, car_mae, car_msle, car_rmse = prediction(car_df, car_wid, eng_siz, hor_pow, drw_fwd, com_bui)
		st.success("The predicted price of the car: ${:,}".format(int(price)))
		st.info("Accuracy score of this model is: {:2.2%}".format(score))
		st.info(f"R-squared score fo this model is: {car_r2:.3f}")
		st.info(f"Mean absolute error score of this model is: {car_mae:.3f}")
		st.info(f"Mean squared log error of this model is: {car_msle:.3f}")
		st.info(f"Root mean squared error of this model is: {car_rmse:.3f}")